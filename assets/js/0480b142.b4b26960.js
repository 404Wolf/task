"use strict";(self.webpackChunktaskfile_dev=self.webpackChunktaskfile_dev||[]).push([[836],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return h}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=u(t),d=o,h=c["".concat(l,".").concat(d)]||c[d]||p[d]||r;return t?a.createElement(h,s(s({ref:n},m),{},{components:t})):a.createElement(h,s({ref:n},m))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var u=2;u<r;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3584:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return u}});var a=t(3117),o=(t(7294),t(3905));const r={slug:"/faq/",sidebar_position:7},s="FAQ",i={unversionedId:"faq",id:"faq",title:"FAQ",description:"This page contains a list of frequently asked questions about Task.",source:"@site/docs/faq.md",sourceDirName:".",slug:"/faq/",permalink:"/faq/",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{slug:"/faq/",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Integrations",permalink:"/integrations/"},next:{title:"Styleguide",permalink:"/styleguide/"}},l={},u=[{value:"Why won&#39;t my task update my shell environment?",id:"why-wont-my-task-update-my-shell-environment",level:2},{value:"I can&#39;t reuse my shell in a task&#39;s commands",id:"i-cant-reuse-my-shell-in-a-tasks-commands",level:2},{value:"&#39;x&#39; builtin command doesn&#39;t work on Windows",id:"x-builtin-command-doesnt-work-on-windows",level:2}],m={toc:u};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"faq"},"FAQ"),(0,o.kt)("p",null,"This page contains a list of frequently asked questions about Task."),(0,o.kt)("h2",{id:"why-wont-my-task-update-my-shell-environment"},"Why won't my task update my shell environment?"),(0,o.kt)("p",null,"This is a limitation of how shells work. Task runs as a subprocess of your\ncurrent shell, so it can't change the environment of the shell that started it.\nThis limitation is shared by other task runners and build tools too."),(0,o.kt)("p",null,"A common way to work around this is to create a task that will generate output\nthat can be parsed by your shell. For example, to set an environment variable on\nyour shell you can write a task like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'my-shell-env:\n  cmds:\n    - echo "export FOO=foo"\n    - echo "export BAR=bar"\n')),(0,o.kt)("p",null,"Now run ",(0,o.kt)("inlineCode",{parentName:"p"},"eval $(task my-shell-env)")," and the variables ",(0,o.kt)("inlineCode",{parentName:"p"},"$FOO")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"$BAR")," will be\navailable in your shell."),(0,o.kt)("h2",{id:"i-cant-reuse-my-shell-in-a-tasks-commands"},"I can't reuse my shell in a task's commands"),(0,o.kt)("p",null,"Task runs each command as a separate shell process, so something you do in one\ncommand won't effect any future commands. For example, this won't work:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  foo:\n    cmds:\n      - a=foo\n      - echo $a\n      # outputs \"\"\n")),(0,o.kt)("p",null,"To work around this you can either use a multiline command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  foo:\n    cmds:\n      - |\n        a=foo\n        echo $a\n      # outputs \"foo\"\n")),(0,o.kt)("p",null,"Or for more complex multi-line commands it is recommended to move your code into\na separate file and call that instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\n\ntasks:\n  foo:\n    cmds:\n      - ./foo-printer.bash\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\na=foo\necho $a\n")),(0,o.kt)("h2",{id:"x-builtin-command-doesnt-work-on-windows"},"'x' builtin command doesn't work on Windows"),(0,o.kt)("p",null,"The default shell on Windows (",(0,o.kt)("inlineCode",{parentName:"p"},"cmd")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"powershell"),") do not have commands like\n",(0,o.kt)("inlineCode",{parentName:"p"},"rm")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"cp")," available as builtins. This means that these commands won't work.\nIf you want to make your Taskfile fully cross-platform, you'll need to work\naround this limitation using one of the following methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"{{OS}}")," function to run an OS-specific script."),(0,o.kt)("li",{parentName:"ul"},"Use something like ",(0,o.kt)("inlineCode",{parentName:"li"},'{{if eq OS "windows"}}powershell {{end}}<my_cmd>')," to\ndetect windows and run the command in Powershell directly."),(0,o.kt)("li",{parentName:"ul"},"Use a shell on Windows that supports these commands as builtins, such as ",(0,o.kt)("a",{parentName:"li",href:"https://gitforwindows.org/"},"Git\nBash")," or ",(0,o.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/windows/wsl/install"},"WSL"),".")),(0,o.kt)("p",null,"We want to make improvements to this part of Task and the issues below track\nthis work. Constructive comments and contributions are very welcome!"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/go-task/task/issues/197"},"#197")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/mvdan/sh/issues/93"},"mvdan/sh#93")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/mvdan/sh/issues/97"},"mvdan/sh#97"))))}c.isMDXComponent=!0}}]);